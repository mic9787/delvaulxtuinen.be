@charset "UTF-8";
@import url("https://fonts.googleapis.com/css?family=Montserrat:700|Open+Sans:300,700");
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  /* Change the default font family in all browsers (opinionated). */
  font-family: "Open Sans", sans-serif;
  font-size: 100%;
  line-height: 1.5em;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2rem;
  line-height: 3rem;
  /* Set 1 unit of vertical rhythm on the top and bottom margins. */
  margin: 1.5rem 0;
}

h2 {
  font-size: 1.5rem;
  line-height: 3rem;
  margin: 1.5rem 0;
}

h3 {
  font-size: 1.17rem;
  line-height: 1.5rem;
  margin: 1.5rem 0;
}

h4 {
  font-size: 1rem;
  line-height: 1.5rem;
  margin: 1.5rem 0;
}

h5 {
  font-size: 0.83rem;
  line-height: 1.5rem;
  margin: 1.5rem 0;
}

h6 {
  font-size: 0.67rem;
  line-height: 1.5rem;
  margin: 1.5rem 0;
}

/* Grouping content
       ========================================================================== */
/**
       * Set 1 unit of vertical rhythm on the top and bottom margin.
       */
blockquote {
  margin: 1.5rem 4rem;
}

dl,
ol,
ul {
  margin: 1.5rem 0;
}

/**
       * Turn off margins on nested lists.
       */
ol ol,
ol ul,
ul ol,
ul ul {
  margin: 0;
}

dd {
  margin: 0 0 0 4rem;
}

ol,
ul {
  padding: 0 0 0 4rem;
}

/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1.5rem 4rem;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
       * Set 1 unit of vertical rhythm on the top and bottom margin.
       */
p,
pre {
  margin: 1.5rem 0;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: "Open Sans", sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.5em;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
  /*
         * 1. Set 1 unit of vertical rhythm on the top and bottom margin.
         * 2. Set consistent space for the list style image.
         */
  margin: 1.5rem 0;
  /* 1 */
  padding: 0 0 0 4rem;
  /* 2 */
  /**
         * Turn off margins on nested lists.
         */
}

menu menu,
ol menu,
ul menu {
  margin: 0;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

@font-face {
  font-family: 'icomoon';
  src: url("../fonts/icomoon.ttf?6iyauk") format("truetype"), url("../fonts/icomoon.woff?6iyauk") format("woff"), url("../fonts/icomoon.svg?6iyauk#icomoon") format("svg");
  font-weight: normal;
  font-style: normal;
}

.ctas a:link:before, .ctas a:visited:before, .footer .callme:before, input[type="radio"].radiobtn + label:before {
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

[class^="icon-"], [class*=" icon-"] {
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-office:before {
  content: "";
}

.icon-phone:before {
  content: "";
}

.icon-envelop:before {
  content: "";
}

.icon-location:before {
  content: "";
}

.icon-user:before {
  content: "";
}

.icon-briefcase:before {
  content: "";
}

.icon-cross:before {
  content: "";
}

.icon-checkmark:before {
  content: "";
}

.icon-checkbox-checked:before {
  content: "";
}

.icon-checkbox-unchecked:before {
  content: "";
}

.icon-radio-checked:before {
  content: "";
}

.icon-radio-unchecked:before {
  content: "";
}

html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

@media (max-width: 350px) {
  html {
    font-size: 12px;
  }
}

*, *:after, *:before {
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}

body {
  background-color: #fff;
  color: #121212;
}

.brand {
  display: inline-block;
  margin: 0;
}

.brand a:link, .brand a:visited {
  padding: 20px;
  font-family: "Montserrat", Georgia, serif;
  font-weight: 700;
  font-size: 1rem;
  text-decoration: none;
  text-transform: uppercase;
  line-height: 1;
  background-color: #6d5c5c;
  color: #cbcbcb;
  -webkit-transition: background ease-in 485ms;
  transition: background ease-in 485ms;
}

.brand a:link span:first-child, .brand a:visited span:first-child {
  color: #9fc54e;
}

.brand a:link:active, .brand a:link:hover, .brand a:link:focus, .brand a:visited:active, .brand a:visited:hover, .brand a:visited:focus {
  background: transparent;
  -webkit-transition: background ease-in 285ms;
  transition: background ease-in 285ms;
}

.container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding: 0 40px;
}

.container:after {
  content: '' !important;
  display: block !important;
  clear: both !important;
}

@media (min-width: 960px) {
  .container {
    max-width: 60rem;
  }
}

@media (min-width: 1140px) {
  .container {
    max-width: 71.25rem;
    padding: 0 20px;
  }
}

.lead {
  color: white;
  font-weight: 700;
  font-size: 1.4375rem;
  line-height: 1.4;
  margin: 5rem 0 1.875rem;
}

@media (min-width: 600px) {
  .lead {
    font-size: 1.875rem;
    line-height: 2.5rem;
    margin: 10.9375rem 0 3.75rem;
    max-width: 52.5rem;
  }
}

@media (min-width: 600px) {
  .ctas {
    display: inline-block;
    min-width: 310px;
    margin-left: 20px;
  }
}

.ctas a:link, .ctas a:visited {
  color: white;
  font-weight: 600;
  text-decoration: none;
  display: block;
  margin-top: 10px;
}

@media (min-width: 600px) {
  .ctas a:link, .ctas a:visited {
    position: relative;
    margin-top: 0;
  }
}

.ctas a:link:before, .ctas a:visited:before {
  padding-right: 7px;
}

.callme {
  color: white;
  font-weight: 600;
  text-decoration: none;
  top: 10px;
}

.callme:before {
  content: "";
}

.mailme {
  top: 14px;
}

.mailme:before {
  content: "";
}

.btn-primary + .callme {
  padding-left: 0;
  margin-top: 1.25rem;
  margin-bottom: 1.25rem;
  display: block;
  text-align: center;
}

@media (min-width: 600px) {
  .btn-primary + .callme {
    margin: 0;
    padding-left: 15px;
    text-align: left;
    display: inline-block;
  }
}

.footer {
  display: none;
  position: absolute;
  bottom: 15px;
  width: 100%;
}

.footer .callme {
  display: block;
  text-align: right;
  padding-right: 2rem;
}

.footer .callme:before {
  padding-right: 7px;
}

.sidebar-open .footer {
  display: block;
}

.btn-primary {
  color: #fff;
  background: #fff;
  border: 3px solid #fff;
  padding: 15px 30px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 1.125rem;
  outline: 0;
  -webkit-transition: all ease-in-out 285ms;
  transition: all ease-in-out 285ms;
  width: 100%;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  background: rgba(255, 255, 255, 0.25);
}

@media (min-width: 600px) {
  .btn-primary {
    min-height: 66px;
    min-width: 278px;
    width: auto;
  }
}

.btn-primary:focus, .btn-primary.focus, .btn-primary:hover, .btn-primary:active {
  color: #fff;
  border-width: 2px;
  background: rgba(255, 255, 255, 0.1);
  text-shadow: 1px 1px #32192B;
}

.btn-primary.disabled, .btn-primary.disabled:hover, .btn-primary.disabled:focus, .btn-primary.disabled.focus, .btn-primary.disabled:active, .btn-primary.disabled.active, .btn-primary[disabled], .btn-primary[disabled]:hover, .btn-primary[disabled]:focus, .btn-primary[disabled].focus, .btn-primary[disabled]:active, .btn-primary[disabled].active {
  background-color: #fff;
  border-color: #fff;
}

.btn-secondary {
  color: #32192B;
  background: transparent;
  border: 3px solid #32192B;
  padding: 15px 30px;
  cursor: pointer;
  border-radius: 4px;
  font-size: 1.125rem;
  outline: 0;
  -webkit-transition: all ease-in-out 285ms;
  transition: all ease-in-out 285ms;
  width: 100%;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
}

@media (min-width: 600px) {
  .btn-secondary {
    min-height: 66px;
    min-width: 278px;
    width: auto;
  }
}

.btn-secondary:focus, .btn-secondary.focus, .btn-secondary:hover, .btn-secondary:active {
  color: #32192B;
  border-width: 2px;
  background: rgba(0, 0, 0, 0.1);
}

.btn-secondary.disabled, .btn-secondary.disabled:hover, .btn-secondary.disabled:focus, .btn-secondary.disabled.focus, .btn-secondary.disabled:active, .btn-secondary.disabled.active, .btn-secondary[disabled], .btn-secondary[disabled]:hover, .btn-secondary[disabled]:focus, .btn-secondary[disabled].focus, .btn-secondary[disabled]:active, .btn-secondary[disabled].active {
  background-color: transparent;
  border-color: #32192B;
}

.btn-block {
  width: 100%;
}

#home body {
  background-image: url("../img/bg.jpg");
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;
  background-attachment: fixed;
}

#home .brand a:link, #home .brand a:visited {
  background: rgba(109, 92, 92, 0.25);
}

#contact {
  height: 100%;
}

#contact body {
  background-color: #3b3f45;
}

#contact .container,
#contact body {
  height: 100%;
}

input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus input:-webkit-autofill {
  -webkit-box-shadow: 0 0 0px 1000px #8B5D90 inset;
}

.form {
  padding: 1.5rem 0;
}

.form-input {
  padding: 4px 0 8px;
  border: 0;
  border-bottom: 2px solid;
  background-color: transparent;
  outline: 0;
  width: 100%;
  font-weight: 600;
}

.form-input:focus ~ .focus-border,
.form-input:valid ~ .focus-border {
  width: 100%;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.form-input:focus ~ label,
.form-input:valid ~ label {
  top: -14px;
  font-size: 11px;
  -webkit-transition: 0.3s;
  transition: 0.3s;
}

.form-input ~ .focus-border {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.form-input ~ label {
  position: absolute;
  left: 0;
  width: 100%;
  top: 9px;
  -webkit-transition: 0.3s;
  transition: 0.3s;
  letter-spacing: 0.5px;
}

.form-textarea {
  width: 100%;
  min-height: 100px;
  border-radius: 4px;
  border: 0;
  outline: 0;
  margin-top: 0.4375rem;
  padding: 5px;
}

.form-section {
  padding: 1.5rem 2rem;
  border-bottom: 2px solid #32192B;
}

.form-section:first-child {
  padding-top: 0;
}

.form-section:last-child {
  border-bottom: 0;
  padding-top: 3rem;
}

.form-section > .form-group + .form-group {
  margin-top: 0.625rem;
}

.form-group {
  position: relative;
}

.form-group [class^="icon-"], .form-group [class*=" icon-"] {
  position: absolute;
  right: 10px;
  top: 9px;
  -webkit-transition: 1.4s;
  transition: 1.4s;
}

.form-group-label {
  margin-top: 0;
  margin-bottom: 0.4375rem;
}

.form-label {
  display: block;
}

.form-title {
  margin: 0;
  line-height: 1;
  text-transform: uppercase;
}

.form-title + p {
  margin-top: 0.8rem;
  margin-bottom: 0;
}

.form-hr {
  border: 0;
  height: 0.125rem;
  background-color: #32192B;
}

.input-txt-group .form-group {
  margin-bottom: 1rem;
}

input[type="radio"].radiobtn {
  margin: 0;
  opacity: 0;
  position: absolute;
}

input[type="radio"].radiobtn + label {
  margin: 0;
  padding: 0;
  width: 100%;
}

input[type="radio"].radiobtn + label:before {
  content: "";
  margin: 0 5px 0 0;
  font-size: 1.25rem;
  position: relative;
  top: 3px;
}

input[type="radio"].radiobtn:checked + label:before {
  content: "";
}

.switch {
  position: absolute;
  height: 0;
  width: 0;
  visibility: hidden;
}

.switch + label {
  cursor: pointer;
  text-indent: -9999px;
  width: 60px;
  height: 30px;
  background: #32192B;
  display: block;
  border-radius: 100px;
  position: relative;
  -webkit-transition: background 0.3s ease-in;
  transition: background 0.3s ease-in;
}

.switch + label:after {
  content: '';
  position: absolute;
  top: 5px;
  left: 5px;
  width: 20px;
  height: 20px;
  background: #644268;
  border-radius: 90px;
  -webkit-transition: 0.3s;
  transition: 0.3s;
}

.switch:checked + label {
  background: #7e5583;
  margin-bottom: 25px;
}

.switch:checked + label:after {
  left: calc(100% - 5px);
  -webkit-transform: translateX(-100%);
          transform: translateX(-100%);
}

.switch + label:active:after {
  width: 40px;
}

[class^="alert-"] {
  padding: 0 1.5rem;
  margin: 2rem 0;
}

[class^="alert-"] h4 {
  font-size: 1.5rem;
}

[type='range'] {
  -webkit-appearance: none;
  margin: 15px 0;
  width: 100%;
  background: transparent;
}

[type='range']:focus {
  outline: 0;
}

[type='range']:focus::-webkit-slider-runnable-track {
  background: rgba(13, 13, 13, 0);
}

[type='range']:focus::-ms-fill-lower {
  background: transparent;
}

[type='range']:focus::-ms-fill-upper {
  background: rgba(13, 13, 13, 0);
}

[type='range']::-webkit-slider-runnable-track {
  cursor: pointer;
  height: 8px;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  width: 100%;
  background: transparent;
  border: 0 solid #cfd8dc;
  border-radius: 5px;
}

[type='range']::-webkit-slider-thumb {
  background: transparent;
  border: 0 solid transparent;
  border-radius: 4px;
  cursor: pointer;
  height: 30px;
  width: 60px;
  -webkit-appearance: none;
}

[type='range']::-moz-range-track {
  cursor: pointer;
  height: 8px;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  width: 100%;
  background: transparent;
  border: 0 solid #cfd8dc;
  border-radius: 5px;
}

[type='range']::-moz-range-thumb {
  background: transparent;
  border: 0 solid transparent;
  border-radius: 4px;
  cursor: pointer;
  height: 30px;
  width: 60px;
}

[type='range']::-ms-track {
  cursor: pointer;
  height: 8px;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  width: 100%;
  background: transparent;
  border-color: transparent;
  border-width: 15px 0;
  color: transparent;
}

[type='range']::-ms-fill-lower {
  background: transparent;
  border: 0 solid #cfd8dc;
  border-radius: 10px;
}

[type='range']::-ms-fill-upper {
  background: transparent;
  border: 0 solid #cfd8dc;
  border-radius: 10px;
}

[type='range']::-ms-thumb {
  background: transparent;
  border: 0 solid transparent;
  border-radius: 4px;
  cursor: pointer;
  height: 30px;
  width: 60px;
  margin-top: 0;
}

[type='range']::-ms-tooltip {
  display: none;
}

.slider {
  position: absolute;
  left: 0;
  top: 0;
  overflow: visible;
  z-index: 100;
}

.slidershell {
  border: 0 none;
  position: relative;
  left: 0;
  top: 0;
  overflow: visible;
}

.slidertrack {
  position: absolute;
  border: 2px solid;
  border-radius: 4px;
}

.sliderfill {
  border: 0;
  border-radius: 4px;
  position: absolute;
  pointer-events: none;
  background: #32192B;
}

.sliderthumb {
  border-radius: 4px;
  width: 60px;
  height: 30px;
  line-height: 30px;
  background-color: #32192B;
  position: absolute;
  left: 0;
  top: 0;
  border: 0 none;
  padding: 0;
  margin: 0;
  text-align: center;
  pointer-events: none;
}

@media (max-width: 600px) {
  .sliderthumb {
    width: 50px;
    height: 50px;
    line-height: 50px;
  }
}

.slidervalue {
  font-size: 0.8125rem;
  width: 60px;
  height: 30px;
  line-height: 30px;
  color: #fff;
  position: absolute;
  left: 0;
  top: 0;
  border: 0 none;
  padding: 0;
  margin: 0;
  text-align: center;
  pointer-events: none;
}

@media (max-width: 600px) {
  .slidervalue {
    width: 50px;
    height: 50px;
    line-height: 50px;
  }
}

html, body, .s-container, .s-pusher, .s-content {
  height: 100%;
}

.s-container {
  position: relative;
  overflow: hidden;
}

.s-content {
  overflow-y: auto;
}

.s-content,
.s-content-inner {
  position: relative;
}

.s-pusher {
  position: relative;
  left: 0;
  z-index: 99;
  height: 100%;
  -webkit-transition: -webkit-transform 325ms;
  transition: -webkit-transform 325ms;
  transition: transform 325ms;
  transition: transform 325ms, -webkit-transform 325ms;
}

.s-pusher:after {
  position: absolute;
  top: 0;
  right: 0;
  width: 0;
  height: 0;
  background: rgba(0, 0, 0, 0.2);
  content: '';
  opacity: 0;
  -webkit-transition: opacity 325ms, width 0.1s 325ms, height 0.1s 325ms;
  transition: opacity 325ms, width 0.1s 325ms, height 0.1s 325ms;
}

.sidebar {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 100;
  visibility: hidden;
  width: 100%;
  height: 100%;
  font-weight: 600;
  -webkit-transition: all 325ms;
  transition: all 325ms;
  -webkit-transform: translate3d(100%, 0, 0);
          transform: translate3d(100%, 0, 0);
  overflow-y: auto;
}

@media (min-width: 600px) {
  .sidebar {
    width: 420px;
    height: 100%;
  }
}

.sidebar:after {
  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  content: '';
  opacity: 1;
  -webkit-transition: opacity 325ms;
  transition: opacity 325ms;
}

.sidebar-open .sidebar {
  visibility: visible;
  -webkit-transition: -webkit-transform 325ms;
  transition: -webkit-transform 325ms;
  transition: transform 325ms;
  transition: transform 325ms, -webkit-transform 325ms;
}

.sidebar-open .sidebar:after {
  width: 0;
  height: 0;
  opacity: 0;
  -webkit-transition: opacity 325ms, width 0.1s 325ms, height 0.1s 325ms;
  transition: opacity 325ms, width 0.1s 325ms, height 0.1s 325ms;
}

.sidebar-open .s-pusher {
  -webkit-transform: translate3d(-100%, 0, 0);
          transform: translate3d(-100%, 0, 0);
}

@media (min-width: 600px) {
  .sidebar-open .s-pusher {
    -webkit-transform: translate3d(-420px, 0, 0);
            transform: translate3d(-420px, 0, 0);
  }
}

.sidebar-open .s-pusher:after {
  width: 100%;
  height: 100%;
  opacity: 1;
  -webkit-transition: opacity 325ms;
  transition: opacity 325ms;
}

.close {
  color: #32192B;
  position: absolute;
  right: 1.5rem;
  top: 1.5rem;
  background: none;
  color: inherit;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
  outline: inherit;
  line-height: 1;
  opacity: .4;
  -webkit-transition: opacity .2s ease-in;
  transition: opacity .2s ease-in;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  -webkit-perspective: 1000;
          perspective: 1000;
}

.close:active, .close:hover, .close:focus {
  opacity: 1;
}

.sidebar {
  background-color: #8B5D90;
}

.sidebar .btn-secondary:focus, .sidebar .btn-secondary.focus, .sidebar .btn-secondary:hover, .sidebar .btn-secondary:active {
  background-color: transparent;
}

.form-input {
  border-color: #644268;
}

.form-input:focus ~ [class^="icon-"], .form-input:focus ~ [class*=" icon-"],
.form-input:valid ~ [class^="icon-"], .form-input:valid ~ [class*=" icon-"] {
  color: #32192B;
}

.form-input ~ label {
  color: #32192B;
}

.form-input ~ .focus-border {
  background-color: #32192B;
}

.form-textarea {
  background-color: #7e5583;
}

.form-group [class^="icon-"], .form-group [class*=" icon-"] {
  color: #644268;
}

.hidden {
  display: none;
}

.img-responsive {
  max-width: 100%;
  height: auto;
  display: block;
  border-radius: 4px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
